% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/network_builder.R
\name{build_network}
\alias{build_network}
\title{Build Network from Distance Matrix}
\usage{
build_network(
  distance_matrix,
  method = "full",
  k = 5,
  epsilon = 0.1,
  threshold = 0.5,
  sigma = NULL,
  percentile = 0.1,
  directed = FALSE,
  self_loops = FALSE,
  normalize = FALSE
)
}
\arguments{
\item{distance_matrix}{A square numeric matrix representing the distances
between time series segments or windows. Typically, this would be the output
of `analyze_ts_distances()` or `ts_distance()`.}

\item{method}{Character string. The network construction method to use.
Options include:
\itemize{
  \item \code{"full"} (default): Returns a raw similarity matrix without
    applying any specific network processing. This is useful for direct
    visualization with tools like `qgraph` where edge filtering is handled
    separately.
  \item \code{"knn"}: K-nearest neighbors graph. Each node is connected
    to its `k` closest neighbors.
  \item \code{"threshold"}: Connects nodes whose distance is below a
    specified `threshold`.
  \item \code{"percentile"}: Connects nodes whose distance falls within
    a specified `percentile` range (e.g., the smallest 10% of distances).
  \item \code{"gaussian"}: Applies a Gaussian kernel to transform distances
    into similarity weights, creating a fully connected weighted graph.
  \item \code{"epsilon"}: Epsilon neighborhood graph. Connects nodes whose
    distance is less than or equal to `epsilon`.
}}

\item{k}{Integer. The number of nearest neighbors to consider for the
\code{"knn"} method. Defaults to 5.}

\item{epsilon}{Numeric. The maximum distance for connections in the
\code{"epsilon"} method. Defaults to 0.1.}

\item{threshold}{Numeric. The maximum distance for connections in the
\code{"threshold"} method. If `NULL` for this method, it defaults to the
25th percentile of finite, positive distances.}

\item{sigma}{Numeric. The bandwidth parameter for the Gaussian kernel in the
\code{"gaussian"} method. If `NULL`, it defaults to the median of finite,
positive distances.}

\item{percentile}{Numeric. The percentile (0 to 1) of smallest distances to
consider for connections in the \code{"percentile"} method. Defaults to 0.1.}

\item{directed}{Logical. If `TRUE`, the resulting graph will be directed.
Defaults to `FALSE`.}

\item{self_loops}{Logical. If `TRUE`, self-loops (connections from a node
to itself) are allowed. Defaults to `FALSE`.}

\item{normalize}{Logical. If `TRUE`, distances are normalized to a [0, 1]
range before applying network construction methods (except for "gaussian"
which handles its own scaling). Defaults to `FALSE`.}
}
\value{
A list containing the constructed network information:
  \item{graph}{An `igraph` object representing the network (for non-"full" methods).}
  \item{similarity_matrix}{The similarity matrix (for "full" method).}
  \item{adjacency_matrix}{The adjacency matrix of the constructed network.}
  \item{original_distance_matrix}{The input distance matrix.}
  \item{method_used}{The network construction method that was applied.}
  \item{parameters}{A list of parameters used for the chosen method.}
  \item{network_stats}{A list of basic network statistics (e.g., number of
    nodes, edges, density, connectivity).}
  \item{nodes}{A data frame with node information, including `window_id` and `label`.
    This is useful for compatibility with visualization packages like `qgraph`.}
  \item{edges}{A data frame representing the edge list of the network, including
    `from`, `to`, and `weight` columns.}
}
\description{
This is a core function to construct various types of networks from a given
distance matrix. It supports different methods for defining connections
between nodes based on their distances.
}
