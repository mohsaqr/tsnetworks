% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scaling_utils.R
\name{apply_scaling}
\alias{apply_scaling}
\title{Unified Scaling Functions for Time Series Data}
\usage{
apply_scaling(
  x,
  method = c("none", "center", "standardize", "minmax", "iqr", "robust", "quantile"),
  center_value = NULL,
  scale_value = NULL,
  quantile_range = c(0.05, 0.95),
  robust_center = FALSE,
  na_action = c("omit", "interpolate", "mean", "median")
)
}
\arguments{
\item{x}{Numeric vector or data frame column to scale}

\item{method}{Scaling method: "none", "center", "standardize", "minmax", "iqr", "robust", "quantile"}

\item{center_value}{Custom center value (used with "center" method)}

\item{scale_value}{Custom scale value (used with custom scaling)}

\item{quantile_range}{Quantile range for "quantile" method (default: c(0.05, 0.95))}

\item{robust_center}{Whether to use median instead of mean for centering}

\item{na_action}{How to handle NA values: "omit", "interpolate", "mean", "median"}
}
\value{
List containing scaled data and scaling parameters
}
\description{
Provides standardized scaling methods that can be used across all functions
in the tsnetworks package. These scaling methods help normalize data for
better analysis results and comparability across different time series.
}
\examples{
# Basic scaling examples
data <- c(1, 5, 10, 15, 20, 100)

# Standardize (z-score)
scaled_std <- apply_scaling(data, method = "standardize")
print(scaled_std$data)

# Min-max scaling to [0,1]
scaled_minmax <- apply_scaling(data, method = "minmax")
print(scaled_minmax$data)

# Robust scaling using IQR
scaled_robust <- apply_scaling(data, method = "iqr")
print(scaled_robust$data)

}
