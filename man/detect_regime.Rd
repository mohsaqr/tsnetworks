% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/regime_detection.R
\name{detect_regime}
\alias{detect_regime}
\title{Enhanced Regime Detection with Multiple Methods (v2 Enhanced)}
\usage{
detect_regime(
  complexity_data,
  method = "smart",
  sensitivity = "medium",
  min_change_size = NULL,
  complexity_col = NULL,
  consolidate_similar = FALSE,
  similarity_threshold = 0.6,
  window_size = 10,
  peak_threshold = 1.96,
  cumulative_threshold = 0.6
)
}
\arguments{
\item{complexity_data}{Data frame with complexity measurements or numeric vector.
If a data frame, it should ideally have a 'time_index' column and all original columns will be preserved in the output.}

\item{method}{Character string specifying detection method. Options:
\itemize{
  \item \code{"cumulative_peaks"}: Detects cumulative complexity peaks using Z-tests.
  \item \code{"changepoint"}: Statistical change point detection (multi-window mean-shift test).
  \item \code{"threshold"}: Adaptive quartile-based regime classification.
  \item \code{"variance_shift"}: Detects changes in variance patterns.
  \item \code{"gradient"}: Detects changes in gradient patterns (slope of rolling linear models).
  \item \code{"entropy"}: Detects changes in the Shannon entropy of the complexity series, calculated in rolling windows.
  \item \code{"smart"} (default): Combines gradient, peaks, and changepoint methods.
  \item \code{"all"}: Applies all individual methods (cumulative_peaks, changepoint, threshold, variance_shift, gradient, entropy) and uses ensemble voting.
}}

\item{sensitivity}{Character string for detection sensitivity. Options: "low", "medium", "high".
Default is "medium". This affects thresholds and window sizes within detection methods.}

\item{min_change_size}{Minimum number of observations between changes. If NULL, auto-detected
(typically 10% of data length, min 10). Default is NULL.}

\item{complexity_col}{Column name for complexity values if \code{complexity_data} is a data frame.
This column is assumed to contain the pre-computed complexity scores. Auto-detected if NULL. Default is NULL.}

\item{consolidate_similar}{Logical, whether to merge regimes that are statistically similar after initial detection.
Default is FALSE.}

\item{similarity_threshold}{Numeric (0-1), threshold for considering regimes similar enough to merge if \code{consolidate_similar} is TRUE.
Based on normalized mean difference. Default is 0.6.}

\item{window_size}{Integer, base window size for rolling calculations. This is further adjusted by \code{sensitivity}.
Default is 10.}

\item{peak_threshold}{Numeric, base Z-score threshold for individual peak detection in \code{cumulative_peaks}.
Adjusted by \code{sensitivity}. Default is 1.96.}

\item{cumulative_threshold}{Numeric (0-1), base proportion threshold for identifying cumulative peak regions.
Adjusted by \code{sensitivity}. Default is 0.6.}
}
\value{
Data frame containing all original columns from \code{complexity_data} (if it was a data frame)
  plus new columns with regime information:
  \describe{
    \item{time_index}{Time index for each observation (ensured or created)}
    \item{complexity}{Original complexity values that were analyzed (if input was vector, this is it; if data.frame, this is the content of \code{complexity_col})}
    \item{regime_change}{Logical indicating regime change points}
    \item{regime_id}{Numeric regime identifier (re-calculated after any consolidation)}
    \item{regime_name}{Descriptive regime names (Pattern A, B, C, etc.)}
    \item{regime_stability}{Categorical stability: "Stable", "Transitional", "Unstable"}
    \item{complexity_pattern}{Pattern description: "Increasing", "Decreasing", "Stable", "Fluctuating"}
    \item{stability_score}{Numeric stability score (0-1)}
    \item{change_type}{Type of change detected by the method}
    \item{change_magnitude}{Magnitude of the change (method-specific interpretation)}
    \item{confidence}{Confidence in the detection (method-specific interpretation, typically 0-1)}
  }
}
\description{
Detects regime changes in complexity data using multiple sophisticated methods
including cumulative peaks, changepoint detection, variance shifts, threshold analysis, gradient changes, and entropy analysis.
Preserves all original input columns and provides comprehensive analysis with stability classification and pattern recognition.
}
\details{
The function first processes the input and determines parameters based on the chosen \code{sensitivity}
  and other specific threshold arguments. The specified \code{complexity_col} is treated as the direct complexity score.
  It then applies the selected \code{method}.
  If \code{consolidate_similar} is TRUE, an attempt is made to merge regimes that are statistically
  similar based on their mean complexity values.
  Finally, stability markings and complexity patterns are calculated for each point.
  All original columns from the input data frame are preserved in the output.

  Required packages: \code{stats} (for lm, median, quantile, sd, var, coef, hist). \code{zoo} is recommended for
  more robust rolling calculations if available (though basic fallbacks are used).
}
\examples{
# Create sample complexity data
set.seed(123)
n_obs <- 200
complexity_example_df <- data.frame(
  original_id = paste0("ID", 1:n_obs),
  time_index = 1:n_obs,
  category = sample(letters[1:3], n_obs, replace = TRUE),
  complexity_score_value = c(rnorm(50, 0.3, 0.05), rnorm(50, 0.8, 0.08),
                             rnorm(50, 0.5, 0.05), rnorm(50, 0.9, 0.1))
)

# Detect regimes using the 'smart' method, preserving original columns
regimes_smart <- detect_regime(
  complexity_example_df,
  complexity_col = "complexity_score_value",
  method = "smart",
  sensitivity = "medium"
)
print(head(regimes_smart))
print(colnames(regimes_smart)) # Should include original_id, category

# Detect regimes using the new 'entropy' method
regimes_entropy <- detect_regime(
  complexity_example_df,
  complexity_col = "complexity_score_value",
  method = "entropy",
  sensitivity = "medium",
  window_size = 15 # Entropy might benefit from a slightly larger window
)
print(head(regimes_entropy[, c("time_index", "complexity_score_value", "regime_id", "change_type")]))

}
