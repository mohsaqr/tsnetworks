% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/resilience_metrics.R
\name{calculate_resilience_metrics}
\alias{calculate_resilience_metrics}
\title{Calculate Comprehensive Resilience Metrics for TSnetworks}
\usage{
calculate_resilience_metrics(
  data,
  ts_cols = NULL,
  id_col = NULL,
  window_width = 7L,
  scaling_method = "auto",
  capacity_types = c("absorptive", "restorative", "adaptive"),
  baseline_method = "auto",
  na_action = c("pass", "omit", "fail")
)
}
\arguments{
\item{data}{Data frame containing time series data (compatible with rolling_measures(), stna(), etc.)}

\item{ts_cols}{Character vector of time series column names. If NULL, auto-detects numeric columns}

\item{id_col}{Character string for grouping column (same format as rolling_measures())}

\item{window_width}{Integer specifying rolling window size (default: 7)}

\item{scaling_method}{Character string specifying scaling method (uses existing apply_scaling())}

\item{capacity_types}{Character vector specifying which capacities to calculate}

\item{baseline_method}{Method for establishing baseline performance}

\item{na_action}{How to handle missing values (same as rolling_measures())}
}
\value{
Data frame with original data plus added resilience metric columns.
  New columns follow naming pattern: "{capacity}_{metric}" (e.g., "absorptive_vsi")
}
\description{
Calculates comprehensive resilience metrics across three capacity dimensions
(absorptive, restorative, adaptive) that are fully compatible with existing
TSnetworks data structures and workflows. This function adds resilience
analysis capabilities without modifying any existing TSnetworks functions.
}
\examples{
# Basic resilience analysis
data(saqrsteps)
resilience_data <- calculate_resilience_metrics(saqrsteps, ts_cols = "Steps")
head(resilience_data)

# Integrate with existing TSnetworks workflow
stna_result <- stna(saqrsteps, "Steps", num_states = 4, method = "quantile")
enhanced_data <- calculate_resilience_metrics(stna_result$data, ts_cols = "Steps")

# Use with existing plotting functions
plot_timeseries_enhanced(enhanced_data, ts_col = "Steps")

}
