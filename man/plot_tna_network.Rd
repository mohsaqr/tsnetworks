% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/unified_plotting.R
\name{plot_tna_network}
\alias{plot_tna_network}
\title{Create TNA Network Plot for Any Classification/Discretization Results}
\usage{
plot_tna_network(
  data,
  state_col = NULL,
  time_col = NULL,
  layout = c("spring", "circle", "tree", "grid"),
  node_size_method = c("frequency", "duration", "uniform"),
  edge_weight_method = c("frequency", "probability", "uniform"),
  color_palette = c("default", "viridis", "plasma", "rainbow"),
  show_labels = TRUE,
  show_edge_labels = FALSE,
  min_edge_weight = 0.01,
  title = NULL,
  ...
)
}
\arguments{
\item{data}{Data frame containing classification/state results}

\item{state_col}{Column name containing the states/classifications (auto-detected if NULL)}

\item{time_col}{Column name for time axis (optional, uses row indices if NULL)}

\item{layout}{Layout algorithm for network: "spring", "circle", "tree", "grid"}

\item{node_size_method}{Method for node sizing: "frequency", "duration", "uniform"}

\item{edge_weight_method}{Method for edge weighting: "frequency", "probability", "uniform"}

\item{color_palette}{Color palette for states: "default", "viridis", "plasma", "rainbow"}

\item{show_labels}{Whether to show state labels on nodes}

\item{show_edge_labels}{Whether to show transition probabilities on edges}

\item{min_edge_weight}{Minimum edge weight to display (filters weak connections)}

\item{title}{Plot title (auto-generated if NULL)}

\item{...}{Additional arguments passed to plotting functions}
}
\value{
Network plot (invisible return of network object)
}
\description{
A unified function to create Temporal Network Analysis (TNA) plots for any
classification or discretization results from the tsnetworks package.
This function works with results from stna(), detect_regime(), calculate_hurst(),
visibility_graph(), or any data frame with state/classification columns.
}
\examples{
# Example with STNA results
data(saqrsteps)
stna_result <- stna(saqrsteps, value_column = "Steps", num_states = 4, method = "quantile")
plot_tna_network(stna_result)

# Example with regime detection results
complexity_data <- rolling_measures(saqrsteps, "Steps", window_width = 7)
regime_result <- detect_regime(complexity_data, method = "smart")
plot_tna_network(regime_result, state_col = "regime_stability")

# Example with Hurst analysis results
hurst_result <- calculate_hurst(saqrsteps, ts_col = "Steps", method = "dfa")
plot_tna_network(hurst_result, state_col = "dfa.state")

}
